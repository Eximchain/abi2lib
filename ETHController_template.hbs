const path = require("path");
const fs = require("fs");
const Web3 = require("web3");

const herePath = aPath => path.resolve(__dirname, aPath)
const conf = require(herePath("./config.json"));
const web3 = new Web3(new Web3.providers.HttpProvider(conf.eth.provider));
const Connector = require(herePath("./GenericETHConnector"));

/**
* @class
* @classdesc - interface to interact with ETH Connector for all methods
* */
class {{ contractName }}Controller{

    /**
    * @constructor
    * @description initializes the connector, which will interact with SmartContract via web3
    * */
    constructor(){
        this.config = JSON.parse(fs.readFileSync(herePath("./config.json")));
    }

    /**
    * @function
    * @instance
    * @description Detects current network and instantiates web3 interface to it.
    * @returns { Promise }
    * */
    detectNetwork(){
        return web3.eth.net.getId().then((netId) => {
            this.connector = new Connector(herePath("./contract.json"), netId);
        }).catch(err => {
            console.log(err)
        });
    }

    /**
    * @function
    * @instance
    * @description Deprecated name for #detectNetwork().
    * @returns { Promise }
    * */
    connect(){
        return detectNetwork();
    }

{{#each abi}}
{{#ifEquals type "function"}}
{{#if constant }}
    /**
    * @function
    * @instance
    * @param { address } from - from address
    {{#each inputs}}
    * @param { {{type}} } {{name}}
    {{/each}}
    * @description Call {{name}}, does not execute a transaction.
    * @returns { Promise }
    * */
    get_{{name}}(from{{#each inputs}}, {{#if name !== ""}}{{name}}{{else}}{{type}}{{/if}}{{/each}}){
        return this.connector.read("{{name}}", from, [{{{inputList inputs}}}]);
    }
{{else}}
    /**
    * @function
    * @instance
    * @param { address } from - from address
    {{#if payable}}
    * @param { Number } value - eth to be sent
    {{/if}}
    {{#each inputs}}
    * @param { {{type}} } {{ name }}
    {{/each}}
    * @description Send transaction to {{name}}{{#if payable}}; real value is spent{{/if}}.
    * @returns { Promise }
    * */
    post_{{name}}(from{{#if payable}}, value{{/if}}{{#each inputs}}, {{ name }}{{/each}}){
        return this.connector.write("{{name}}", from, {{#if payable}}value{{else}}null{{/if}}, [{{{inputList inputs}}}]);
    }
{{/if}}
{{/ifEquals}}
{{/each}}

}

module.exports = {{ contractName }}Controller;